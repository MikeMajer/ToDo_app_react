{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaksList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","handleText","e","setState","target","value","handleCheck","handleDate","handleClick","_this$state","length","props","add","console","log","maxDate","this","react_default","a","createElement","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","_props$task","task","active","important","finishDate","style","color","change","delete","finish","toLocaleString","TaskLIst","tasks","filter","done","sort","b","toLowerCase","activeTasks","map","components_Task","key","doneTasks","Fragment","fontSize","App","counter","deleteTask","Object","toConsumableArray","changeTaskStatus","Array","from","forEach","getTime","addTask","prevState","concat","components_AddTask","TaksList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47a030dc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../styles/AddTask.css'\r\n\r\nclass AddTask extends Component {\r\n    minDate = new Date().toISOString().slice(0, 10);\r\n\r\n    state = {\r\n        text: '',\r\n        checked: false,\r\n        date: this.minDate\r\n    }\r\n    handleText = (e) => {\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n    }\r\n\r\n    handleCheck = (e) => {\r\n        this.setState({\r\n            checked: e.target.checked\r\n        })\r\n    }\r\n\r\n    handleDate = (e) => {\r\n        this.setState({\r\n            date: e.target.value,\r\n        })\r\n    }\r\n\r\n    handleClick = () => {\r\n        const { text, checked, date } = this.state;\r\n        if (text.length > 2) {\r\n            const add = this.props.add(text, date, checked);\r\n            if (add) {\r\n                this.setState({\r\n                    text: \"\",\r\n                    checked: \"\",\r\n                    date: this.minDate\r\n                })\r\n            }\r\n        } else {\r\n            console.log(\"to short\")\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n        maxDate = maxDate + \"-12-31\"\r\n\r\n        return (\r\n            <div className=\"form\">\r\n                <input type=\"text\" placeholder=\"add task\" value={this.state.text} onChange={this.handleText} />\r\n                <input type=\"checkbox\" checked={this.state.checked} id=\"important\" onChange={this.handleCheck} />\r\n                <label htmlFor=\"important\">Priority</label>\r\n                <br />\r\n                <label htmlFor=\"date\">Until when to do it</label>\r\n                <input type=\"date\" value={this.state.date} min={this.minDate} max={maxDate} onChange={this.handleDate} />\r\n                <br />\r\n                <button onClick={this.handleClick}>Add</button>\r\n                <hr />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTask;","import React from 'react';\r\n\r\n\r\nconst Task = (props) => {\r\n\r\n  const style = {\r\n    color: 'red',\r\n  }\r\n\r\n  const { text, date, id, active, important, finishDate } = props.task;\r\n\r\n  if (active) {\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong style={important ? style : null}>{text}</strong> - till <span> {date} </span>\r\n          <button onClick={() => props.change(id)}>Done</button>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    const finish = new Date(finishDate).toLocaleString()\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong>{text}</strong> <em> till {date} </em>\r\n          <br />\r\n          - task is done on <span> {finish}  </span>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from './Task';\r\n\r\nconst TaskLIst = (props) => {\r\n\r\n  const active = props.tasks.filter(task => task.active);\r\n  const done = props.tasks.filter(task => !task.active);\r\n\r\n  if (done.length >= 2) {\r\n    done.sort((a, b) => {\r\n      if (a.finishDate < b.finishDate) {\r\n        return 1;\r\n      } else if (a.finishDate > b.finishDate) {\r\n        return -1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    })\r\n  }\r\n\r\n  if (active.length >= 2) {\r\n    active.sort((a, b) => {\r\n\r\n      a = a.text.toLowerCase();\r\n      b = b.text.toLowerCase();\r\n\r\n      if (a < b) return -1;\r\n      else if (a > b) return 1;\r\n      else return 0;\r\n    })\r\n  }\r\n\r\n  const activeTasks = active.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change} />);\r\n  const doneTasks = done.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change} />);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"active\">\r\n        <h1>Tasks to do</h1>\r\n        {activeTasks.length > 0 ? activeTasks : <p>All tasks are done - enjoy:)</p>}\r\n      </div>\r\n      <hr />\r\n      <div className=\"done\">\r\n        <h3>Tasks done <em>({done.length})</em></h3>\r\n        {done.length > 5 && <span style={{ fontSize: 10 }}>display only 5 last elements</span>}\r\n        {doneTasks.slice(0, 5)}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TaskLIst;","import React, { Component } from 'react';\nimport AddTask from './AddTask';\nimport TaskList from './TaksList';\nimport '../styles/App.css';\n\n\nclass App extends Component {\n\n  counter = 4\n  state = {\n    tasks: [\n      {\n        id: 0,\n        text: 'play my favorite game',\n        date: '2018-02-15',\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 1,\n        text: 'do shopping',\n        date: '2018-02-20',\n        important: true,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 2,\n        text: 'clean house',\n        date: '2018-02-15',\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 3,\n        text: 'do workout',\n        date: '2018-02-10',\n        important: true,\n        active: true,\n        finishDate: null,\n      },\n    ]\n  }\n\n  deleteTask = (id) => {\n    let tasks = [...this.state.tasks];\n    tasks = tasks.filter(task => task.id !== id)\n    this.setState({\n      tasks\n    })\n  }\n\n  changeTaskStatus = (id) => {\n    const tasks = Array.from(this.state.tasks);\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime()\n      }\n    })\n    this.setState({\n      tasks\n    })\n  }\n\n  addTask = (text, date, important) => {\n    const task = {\n      id: this.counter,\n      text,\n      date,\n      important,\n      active: true,\n      finishDate: null,\n    }\n    this.counter++\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task]\n    }));\n    return true\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1> ToDo App </h1>\n        <AddTask add={this.addTask} />\n        <TaskList tasks={this.state.tasks} delete={this.deleteTask} change={this.changeTaskStatus} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}